#+TITLE: perf

~perf~ provides some ideas, code and a library for low-level performance measurement for Haskell hacking. The library:

- provides a monad transformer, ~PerfT~, as a light-weight wrapper for use on existing code. ~PerfT~ modifications can be included in code bases, as opposed to performance being separated code and  process, with any effects able to be erased at compile time with ~evalPerfT~.

- focuses on using the rdtsc instruction set that comes with the x86 chip to measure accurate time performance as number of clock cycles.

* Usage

#+begin_src haskell
import Perf
#+end_src



* setup

Running this readme.org is very slow compared with an external process which accesses the compiled version of the library.

#+begin_src haskell :results output
:r
:set prompt " > "
:set -Wno-type-defaults
:set -Wno-name-shadowing
:set -XOverloadedStrings
import Perf
putStrLn "ok"
#+end_src

#+RESULTS:
#+begin_example
Build profile: -w ghc-8.10.7 -O1
In order, the following will be built (use -v for more details):
 - perf-0.9.0 (lib) (file src/Perf/Time.hs changed)
Preprocessing library for perf-0.9.0..
GHCi, version 8.10.7: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /Users/tonyday/haskell/perf/.ghci
[1 of 8] Compiling Perf.Algos       ( src/Perf/Algos.hs, interpreted )
[2 of 8] Compiling Perf.Degrade     ( src/Perf/Degrade.hs, interpreted )
[3 of 8] Compiling Perf.Types       ( src/Perf/Types.hs, interpreted )
[4 of 8] Compiling Perf.Time        ( src/Perf/Time.hs, interpreted )
[5 of 8] Compiling Perf.Stats       ( src/Perf/Stats.hs, interpreted )
[6 of 8] Compiling Perf.Space       ( src/Perf/Space.hs, interpreted )
[7 of 8] Compiling Perf.BigO        ( src/Perf/BigO.hs, interpreted )
[8 of 8] Compiling Perf             ( src/Perf.hs, interpreted )
Ok, 8 modules loaded.
> Ok, 8 modules loaded.
>  >  >  >  > ok
#+end_example


#+begin_src haskell :results output
import Perf
import Data.FormatN
import Prelude as P
import Data.Foldable
import qualified Data.Text as Text
import qualified Data.Text.IO as Text
putStrLn "ok"
#+end_src

#+RESULTS:
:
: >  >  >  >  > ok

* time

** What a ~tick~ is

The fundamental operation of Perf.Time is tick, which sandwiches a (strict) function application between two readings of the rdstc chip.

#+begin_src haskell
:t tick
#+end_src

#+RESULTS:
: tick :: (a -> b) -> a -> IO (Cycles, b)

tick returns in the IO monad, because reading a cycle counter is an IO effect. The trivial but fundamental point is that performance measurement effects the computation being measured.

Unlike benchmarking-style libraries, such as criterion, the result of the computation is passed through along with the cycle count. In this way, the `Perf` monad can be inserted into the midst of a computation in an attempt to measure performance in-situ as opposed to sitting off in a separate and perhaps unrepresentative process.

*** tick_

tick_ measures the number of cycles between two clock reads.

#+begin_src haskell
:t tick_
#+end_src

#+RESULTS:
: tick_ :: IO Cycles

#+begin_src haskell
import Control.Monad
replicateM 10 tick_
#+end_src

#+RESULTS:
| 10260 | 998 | 838 | 794 | 800 | 788 | 790 | 832 | 802 | 818 |

*** multiple ticks

#+begin_src haskell
fmap (fmap fst) . replicateM 10 $ tick (const ()) ()
#+end_src

#+RESULTS:
| 8610 | 3654 | 2900 | 2932 | 2672 | 2708 | 2684 | 2664 | 2582 | 2652 |

Here, ~const () ()~ was evaluated and took 6.7k cycles for the first effect, reducing down to 2.2k after 10 effects. What it did in that time we will never know, really, at least from usage of ~perf~. 2.2k cycles is, on my 2.5GHz machine equal to 2200 / 2.5e9 = 8.8e-7 of a second or 880 nanoseconds.

*** tickIO

~tickIO~ measures the evaluation of an IO value.

#+begin_src haskell
:t tickIO
#+end_src

#+RESULTS:
: tickIO :: IO a -> IO (Cycles, a)

#+begin_src haskell
fmap (fmap fst) . replicateM 10 $ tickIO (pure ())
#+end_src

#+RESULTS:
| 5840 | 2602 | 1910 | 1698 | 1668 | 1660 | 1672 | 1676 | 1680 | 1662 |

#+begin_src haskell
ticks 100 (const ()) ()
#+end_src

#+RESULTS:
| 8226 | 3298 | 3254 | 2686 | 2694 | 2724 | 2868 | 2732 | 2644 | 2678 | 2680 | 2896 | 2734 | 2606 | 2608 | 2598 | 2606 | 2738 | 2742 | 2610 | 2554 | 2532 | 2576 | 2592 | 2600 | 2562 | 2786 | 2592 | 2646 | 2624 | 2666 | 2640 | 2640 | 2602 | 2672 | 2560 | 3478 | 2556 | 2552 | 2572 | 2622 | 2492 | 2572 | 2706 | 2544 | 2604 | 2748 | 2570 | 2596 | 3078 | 2666 | 2592 | 2612 | 2648 | 2594 | 2564 | 2716 | 2564 | 2594 | 2596 | 2554 | 2766 | 2552 | 3026 | 2602 | 2860 | 2632 | 2614 | 2620 | 2586 | 3014 | 2626 | 2626 | 2614 | 2830 | 2624 | 2616 | 2648 | 2610 | 2626 | 2610 | 2590 | 2930 | 2622 | 2732 | 2698 | 3004 | 2664 | 2948 | 2630 | 2588 | 2766 | 2726 | 2600 | 2634 | 2792 | 2704 | 2774 | 2638 | 2634 |

*** sum example

#+begin_src haskell
fmap (comma (Just 3) . fromIntegral) . fst <$> ticks 10 sum ([1..10000] :: [Double])
#+end_src

#+RESULTS:
| 3,680,000 | 5,020,000 | 726,000 | 693,000 | 2,880,000 | 746,000 | 671,000 | 1,730,000 | 626,000 | 618,000 |


#+begin_src haskell
ts <- ticks 10000 sum ([1..1000] :: [Double])
putStrLn $ Text.unpack $ average (fst ts)
#+end_src

#+RESULTS:
: 58,800

* PerfT

~PerfT~ allows for multiple measurement points and is polymorphic in what is being measured. It returns a Map of results held in State.

Compare a lower-level usage of ticks, measuring the average of summing to one thousand over one thousand trials:

#+begin_src haskell
averageD . fst <$> ticks 1000 sum [1..1000]
#+end_src

#+RESULTS:
: 69231.902

... with PerfT usage

#+begin_src haskell
import qualified Data.Map.Strict as Map
fmap averageD <$> execPerfT (times 1000) (sum |$| [1..1000])
#+end_src

#+RESULTS:
: fromList [("",71529.594)]

Comparing performance of sum versus a list fusion approach:

#+begin_src haskell
import qualified Data.Map.Strict as Map
:set -Wno-unused-do-bind
fmap averageD <$> (execPerfT (times 1000) $ do; (fap "sum" sum [1..1000]); (fap "fusion" (\x -> sum [1..x]) 1000))
#+end_src

#+RESULTS:
: > fromList [("fusion",118589.68),("sum",73765.894)]

An IO example

#+begin_src haskell
exampleIO' :: IO ()
exampleIO' = do
  txt <- Text.readFile "src/Perf.hs"
  let n = Text.length txt
  Text.putStrLn $ "length of file is: " <> Text.pack (show n)
#+end_src

#+RESULTS:
: >  > length of file is: 1927

#+begin_src haskell
import Data.Semigroup
exampleIO = execPerfT time (do
  txt <- fam "file read" (Text.readFile "src/Perf.hs")
  n <- fap "length" Text.length txt
  fam "print result" (Text.putStrLn $ "length of file is: " <> Text.pack (show n)))
#+end_src

#+begin_src sh :results drawer
perf-explore -r 10 -l 100000 --exampleIO +RTS -T -RTS
#+end_src

#+RESULTS:
:results:
length of file is: 1927
|label1|results|
|---|---|
|file read|4.37e5|
|length|4.75e3|
|print result|5.52e4|

outer version

length of file is: 1927
|label1|results|
|---|---|
|file read|1.01e5|
|length|4.51e3|
|print result|5.29e3|
|total|1.16e5|

slop version

length of file is: 1927
|label1|results|
|---|---|
|file read|9.16e4|
|length|4.43e3|
|print result|5.07e3|
|slop|1.35e3|
|total|1.02e5|
:end:


** callibration

~perf-explore~ contains some exploratory routines to help develop =perf=

#+begin_src sh :results output
perf-explore --help
#+end_src

#+RESULTS:
#+begin_example
basic perf callibration

Usage: perf-explore [-r|--runs ARG] [-l|--length ARG]
                    [--best | --median | --average | --averagesecs]
                    [--default | --sums | --noop | --ticks | --gauge | --space |
                      --spacetime] [-s|--sum ARG]
                    [--sumFuse | --sum | --lengthF | --constFuse | --mapInc]

  perf benchmarking

Available options:
  -r,--runs ARG            number of runs to perform
  -l,--length ARG          length of list
  --best                   report upper decile
  --median                 report median
  --average                report average
  --averagesecs            report average in seconds
  --default                default measurement (polySum)
  --sums                   sums
  --noop                   no-ops
  --ticks                  tick types
  --gauge                  gauge comparison
  --space                  space stats
  --spacetime              space and time stats
  -s,--sum ARG             type of sum code
  --sumFuse                fused sum pipeline
  --sum                    sum
  --lengthF                foldr id length
  --constFuse              fused const pipeline
  --mapInc                 fmap (+1)
  -h,--help                Show this help text
#+end_example

#+begin_src haskell
import qualified Data.Map.Strict as Map
fmap averageD <$> execPerfT (times 10000) (sum |$| [1..1000])
#+end_src

#+RESULTS:
: fromList [("",59721.9976)]

The equivalent to the above code is:

#+begin_src sh :results drawer :exports both
perf-explore -r 10000 -l 1000 --sum
#+end_src

#+RESULTS:
:results:
| stat | result |
|------+--------|
| sum  | 8.80e3 |
:end:

** noops

#+begin_src sh :results drawer
perf-explore --noop
#+end_src

#+RESULTS:
:results:
| stat     | result |                                                     |
|----------+--------+-----------------------------------------------------|
| average  | fams   |                                              2.28e1 |
| average  | faps   |                                              2.54e1 |
| best     | fams   |                                              1.94e1 |
| best     | faps   |                                              1.73e1 |
| first 10 | fams   |  302.0 44.0 22.0 20.0 22.0 20.0 20.0 20.0 22.0 20.0 |
| first 10 | faps   | 4560.0 36.0 18.0 18.0 18.0 18.0 20.0 18.0 20.0 16.0 |
| median   | fams   |                                              2.11e1 |
| median   | faps   |                                              1.91e1 |
:end:


#+begin_src haskell
:r
:set -XOverloadedLabels
import qualified Data.Text as Text
import qualified Data.Map.Strict as Map
import Chart
import Prelude
import Optics.Core
m <- read <$> readFile "other/noop.map" :: IO (Map.Map Text.Text [Cycles])
let (Just d) = Map.lookup "fap times" m
filter (> 100) d
#+end_src

#+RESULTS:
| Cycles | (word = 4560) | Cycles | (word = 166) |

#+begin_src haskell :file other/noop.svg :results output graphics file :exports results
writeChartSvg "other/noop.svg" $ mempty & #hudOptions .~ colourHudOptions (rgb light) defaultHudOptions & #charts .~ unnamed [(RectChart (defaultRectStyle & #borderSize .~ 0 & #color .~ Colour 1 1 1 1) (zipWith (\y x -> Rect x (x+1) 0 y) (fromIntegral <$> filter (<= 100) d) [0..]))]
#+end_src

#+RESULTS:
[[file:other/noop.svg]]

** measurement context

Exploration of how the code surrounding measurement effects performance.

#+begin_src sh
perf-explore -r 1000 -l 1000 --ticks
#+end_src

#+RESULTS:
|   |               | stepTime |    tick | tickForce | tickForceArgs | tickLazy | tickWHNF |   times |
|   | sumAux        |  29900.0 | 17000.0 |   29800.0 |       29200.0 |     16.7 |  15600.0 | 29900.0 |
|   | sumCata       |  18300.0 | 20400.0 |   19500.0 |       18600.0 |     16.4 |  19000.0 | 18200.0 |
|   | sumCo         |  16700.0 | 23700.0 |   16400.0 |       15900.0 |     16.8 |  16300.0 | 17100.0 |
|   | sumCoCase     |  15900.0 | 18200.0 |   16100.0 |       15700.0 |     17.2 |  17200.0 | 15600.0 |
|   | sumCoGo       |  18700.0 | 19300.0 |   20500.0 |       19000.0 |     16.9 |  19900.0 | 19800.0 |
|   | sumF          |   9990.0 | 10500.0 |    9790.0 |        9780.0 |     17.0 |  10400.0 |  9980.0 |
|   | sumFlip       |  11400.0 | 10500.0 |   12200.0 |       10700.0 |     19.8 |  16800.0 | 11900.0 |
|   | sumFlipLazy   |  16500.0 | 14000.0 |   12000.0 |       13200.0 |     17.7 |  12100.0 | 17900.0 |
|   | sumFoldr      |  18900.0 | 20600.0 |   19900.0 |       19600.0 |     17.0 |  19400.0 | 20100.0 |
|   | sumFuse       |   1950.0 |  1960.0 |    1950.0 |        1950.0 |     19.3 |   3240.0 |  1970.0 |
|   | sumFuseFoldl' |   1960.0 |  2010.0 |    1950.0 |        1950.0 |     20.3 |   1960.0 |  1960.0 |
|   | sumFuseFoldr  |   8580.0 |  9820.0 |    8790.0 |        8580.0 |     19.0 |   8570.0 |  8590.0 |
|   | sumFusePoly   |   1970.0 |  1970.0 |    1960.0 |        1970.0 |     19.5 |   1970.0 |  1980.0 |
|   | sumLambda     |  15300.0 | 11200.0 |   11300.0 |       13100.0 |     17.0 |  11100.0 | 15000.0 |
|   | sumMono       |   9820.0 | 11100.0 |    9690.0 |        9680.0 |     16.6 |  11000.0 |  9820.0 |
|   | sumPoly       |  10500.0 | 10700.0 |   10300.0 |       10300.0 |     16.3 |  10500.0 | 18500.0 |
|   | sumSum        |  10200.0 | 11100.0 |   10700.0 |        9930.0 |     16.5 |  11100.0 | 10300.0 |
|   | sumTail       |   9640.0 | 11200.0 |   11000.0 |       10400.0 |     17.5 |  11000.0 |  9630.0 |
|   | sumTailLazy   |  10000.0 | 11000.0 |    9890.0 |        9990.0 |     16.9 |  11000.0 | 11200.0 |


#+begin_src sh
perf-explore -r 100000 -l 1000 --ticks
#+end_src

#+RESULTS:
|   |               | stepTime |    tick | tickForce | tickForceArgs | tickLazy | tickWHNF |   times |
|   | sumAux        |  18300.0 | 18300.0 |   18400.0 |       18200.0 |     16.8 |  18300.0 | 18300.0 |
|   | sumCata       |  20800.0 | 20900.0 |   20600.0 |       20500.0 |     16.7 |  20900.0 | 20900.0 |
|   | sumCo         |  18200.0 | 18000.0 |   17900.0 |       18200.0 |     16.7 |  18000.0 | 18000.0 |
|   | sumCoCase     |  15100.0 | 18000.0 |   15500.0 |       15200.0 |     17.1 |  18000.0 | 15200.0 |
|   | sumCoGo       |  20800.0 | 20800.0 |   20600.0 |       21000.0 |     16.8 |  20800.0 | 20700.0 |
|   | sumF          |   9030.0 |  8790.0 |    8590.0 |        9820.0 |     16.8 |   8640.0 |  8590.0 |
|   | sumFlip       |   8770.0 |  8600.0 |    8610.0 |        8420.0 |     17.1 |   8610.0 |  8780.0 |
|   | sumFlipLazy   |  19500.0 |  8620.0 |    8410.0 |       21900.0 |     16.7 |   8540.0 | 19000.0 |
|   | sumFoldr      |  20900.0 | 20900.0 |   20900.0 |       20500.0 |     16.9 |  20800.0 | 20800.0 |
|   | sumFuse       |   2040.0 |  2040.0 |    2050.0 |        2040.0 |     19.2 |   2050.0 |  2160.0 |
|   | sumFuseFoldl' |   2070.0 |  2050.0 |    2070.0 |        2100.0 |     19.1 |   2040.0 |  2180.0 |
|   | sumFuseFoldr  |  11800.0 | 11100.0 |   11200.0 |       11200.0 |     19.3 |  11100.0 | 11200.0 |
|   | sumFusePoly   |   2060.0 |  2070.0 |    2070.0 |        2060.0 |     19.2 |   2070.0 |  1990.0 |
|   | sumLambda     |   8660.0 |  8640.0 |    9050.0 |        8830.0 |     17.1 |   8770.0 |  8740.0 |
|   | sumMono       |  20800.0 |  8690.0 |   20700.0 |       20200.0 |     17.4 |   8810.0 | 21200.0 |
|   | sumPoly       |   8660.0 |  8740.0 |    8630.0 |        8640.0 |     16.9 |   8690.0 |  8640.0 |
|   | sumSum        |   8570.0 |  8860.0 |    8450.0 |        8470.0 |     16.8 |   8460.0 |  8450.0 |
|   | sumTail       |   5980.0 |  6270.0 |    5790.0 |        5760.0 |     16.8 |   5830.0 |  5990.0 |
|   | sumTailLazy   |  12000.0 | 10700.0 |   11900.0 |       11600.0 |     16.9 |  12000.0 | 12100.0 |

*** short list
#+begin_src sh
perf-explore -r 10000 -l 10 --best --ticks
#+end_src

#+RESULTS:
|   |               | stepTime | tick | tickForce | tickForceArgs | tickLazy | tickWHNF | times |
|   | sumAux        |     89.4 | 92.8 |      91.4 |          89.5 |     14.8 |     89.4 |  89.8 |
|   | sumCata       |     89.3 | 93.4 |      95.5 |          93.9 |     14.8 |     89.1 |  92.4 |
|   | sumCo         |     89.3 | 93.1 |      90.4 |          92.8 |     14.9 |     89.3 |  89.1 |
|   | sumCoCase     |     89.4 | 93.1 |      89.3 |          89.6 |     15.0 |     89.5 |  91.1 |
|   | sumCoGo       |     89.6 | 93.1 |      95.1 |          93.8 |     14.9 |     89.4 |  92.0 |
|   | sumF          |     75.4 | 78.1 |      79.2 |          77.5 |     14.9 |     75.4 |  76.1 |
|   | sumFlip       |     74.2 | 78.7 |      79.1 |          77.3 |     15.0 |     75.4 |  75.9 |
|   | sumFlipLazy   |     73.9 | 78.5 |      77.8 |          77.3 |     14.8 |     75.1 |  75.9 |
|   | sumFoldr      |     89.5 | 93.2 |      95.4 |          93.9 |     15.0 |     89.5 |  92.8 |
|   | sumFuse       |     35.1 | 35.1 |      33.1 |          33.9 |     17.1 |     34.6 |  35.1 |
|   | sumFuseFoldl' |     35.2 | 35.0 |      32.0 |          33.7 |     17.2 |     34.5 |  35.1 |
|   | sumFuseFoldr  |     47.4 | 47.1 |      45.8 |          45.8 |     17.2 |     46.6 |  45.7 |
|   | sumFusePoly   |     49.7 | 49.9 |      46.9 |          49.3 |     17.2 |     49.6 |  49.1 |
|   | sumLambda     |     75.2 | 79.4 |      79.3 |          79.4 |     14.9 |     77.4 |  79.4 |
|   | sumMono       |     63.2 | 65.2 |      65.3 |          64.9 |     14.9 |     63.5 |  65.2 |
|   | sumPoly       |     77.2 | 79.9 |      79.7 |          79.6 |     15.0 |     78.2 |  79.2 |
|   | sumSum        |     77.2 | 79.6 |      79.4 |          79.6 |     14.8 |     78.2 |  79.3 |
|   | sumTail       |     64.5 | 78.5 |      67.1 |          66.9 |     14.8 |     65.2 |  65.4 |
|   | sumTailLazy   |     64.9 | 67.3 |      67.2 |          65.9 |     14.8 |     64.8 |  65.4 |

*** long list
#+begin_src sh
perf-explore -r 100 -l 100000 --best --ticks
#+end_src

#+RESULTS:
|   |               |  stepTime |      tick | tickForce | tickForceArgs | tickLazy |  tickWHNF |     times |
|   | sumAux        | 4970000.0 | 2270000.0 | 2570000.0 |     4900000.0 |     14.8 | 2560000.0 | 2430000.0 |
|   | sumCata       | 2760000.0 | 2980000.0 | 3170000.0 |     2760000.0 |     15.4 | 3600000.0 | 4160000.0 |
|   | sumCo         | 2610000.0 | 2320000.0 | 4810000.0 |     2570000.0 |     15.4 | 2560000.0 | 4360000.0 |
|   | sumCoCase     | 2490000.0 | 2300000.0 | 2270000.0 |     2260000.0 |     14.4 | 2900000.0 | 2490000.0 |
|   | sumCoGo       | 2750000.0 | 2800000.0 | 6150000.0 |     2790000.0 |     14.8 | 3130000.0 | 2750000.0 |
|   | sumF          |  811000.0 |  823000.0 |  819000.0 |      808000.0 |     15.1 |  817000.0 |  712000.0 |
|   | sumFlip       |  747000.0 |  744000.0 |  740000.0 |      746000.0 |     14.8 |  744000.0 |  746000.0 |
|   | sumFlipLazy   |  979000.0 | 1010000.0 |  981000.0 |      964000.0 |     15.4 |  996000.0 |  981000.0 |
|   | sumFoldr      | 2750000.0 | 2770000.0 | 2760000.0 |     2760000.0 |     14.6 | 2750000.0 | 2790000.0 |
|   | sumFuse       |  192000.0 |  192000.0 |  192000.0 |      192000.0 |     17.0 |  192000.0 |  192000.0 |
|   | sumFuseFoldl' |  192000.0 |  192000.0 |  192000.0 |      192000.0 |     17.1 |  192000.0 |  192000.0 |
|   | sumFuseFoldr  | 1550000.0 | 1560000.0 | 1550000.0 |     1530000.0 |     17.2 | 1550000.0 | 1540000.0 |
|   | sumFusePoly   |  192000.0 |  192000.0 |  192000.0 |      192000.0 |     16.6 |  192000.0 |  192000.0 |
|   | sumLambda     |  805000.0 |  805000.0 |  806000.0 |      808000.0 |     14.8 |  803000.0 |  805000.0 |
|   | sumMono       |  789000.0 |  785000.0 |  783000.0 |      785000.0 |     14.9 |  788000.0 |  787000.0 |
|   | sumPoly       |  791000.0 |  793000.0 |  792000.0 |      793000.0 |     14.6 |  793000.0 |  788000.0 |
|   | sumSum        |  767000.0 |  778000.0 |  768000.0 |      771000.0 |     14.6 |  767000.0 |  772000.0 |
|   | sumTail       |  783000.0 |  780000.0 |  782000.0 |      778000.0 |     15.1 |  776000.0 |  783000.0 |
|   | sumTailLazy   | 1280000.0 | 1390000.0 | 1270000.0 |     1290000.0 |     15.1 | 1310000.0 | 1270000.0 |


* gauge

#+begin_src sh
perf-explore -r 1000 -l 1000 --average --gauge
#+end_src

#+RESULTS:
| sumFuse      |          |     |                 |      |       |    |
| benchmarking | function | ... | function | time | 886.7 | ns |
|              |          |     |                 |      |       |    |
| benchmarking | function | ... | function | time | 873.1 | ns |
|              |          |     |                 |      |       |    |
| sum          |          |     |                 |      |       |    |
| benchmarking | function | ... | function | time | 3.838 | μs |
|              |          |     |                 |      |       |    |
| benchmarking | function | ... | function | time | 3.833 | μs |
|              |          |     |                 |      |       |    |
| lengthF      |          |     |                 |      |       |    |
| benchmarking | function | ... | function | time | 1.881 | μs |
|              |          |     |                 |      |       |    |
| benchmarking | function | ... | function | time | 1.873 | μs |
|              |          |     |                 |      |       |    |
| constFuse    |          |     |                 |      |       |    |
| benchmarking | function | ... | function | time | 578.9 | ns |
|              |          |     |                 |      |       |    |
| benchmarking | function | ... | function | time | 571.7 | ns |
|              |          |     |                 |      |       |    |
| mapInc       |          |     |                 |      |       |    |
| benchmarking | function | ... | function | time | 8.961 | ns |
|              |          |     |                 |      |       |    |
| benchmarking | function | ... | function | time | 11.78 | μs |
|              |          |     |                 |      |       |    |
| noop         |          |     |                 |      |       |    |
| benchmarking | function | ... | function | time | 5.076 | ns |
|              |          |     |                 |      |       |    |
| benchmarking | function | ... | function | time | 4.969 | ns |
|              |          |     |                 |      |       |    |

Canned results

| algo      | gauge     |
|-----------+-----------|
| sumFuse   | 886.7 ns  |
| sum       | 3.838 μs  |
| lengthF   | 1.881 μs  |
| constFuse | 578.9  ns |
| mapInc    | 8.961  ns |
| noop      | 5.076  ns |
|           |           |

#+begin_src sh
perf-explore --examples -r 10000 --averagesecs
#+end_src

#+RESULTS:
|   | stat      |   result |
|   | ---       |      --- |
|   | constFuse | 7.63e-07 |
|   | lengthF   | 1.64e-06 |
|   | mapInc    | 9.71e-09 |
|   | sum       | 3.28e-06 |
|   | sumFuse   | 8.12e-07 |


* space

Data is collected from GHCStats

- allocated_bytes
- gcs
- gcdetails_live_bytes
- max_live_bytes
- max_mem_in_use_bytes

#+begin_src sh :results output
perf-explore -r 10 -l 100000 --time +RTS -T -RTS
#+end_src

| label1 | label2 | results |
|--------+--------+---------|
| sum    |      0 |  1.74e7 |
| sum    |      1 |  9.43e5 |
| sum    |      2 |  9.62e5 |
| sum    |      3 |  9.25e5 |
| sum    |      4 |  8.04e5 |
| sum    |      5 |  8.15e5 |
| sum    |      6 |  8.14e5 |
| sum    |      7 |  8.20e5 |
| sum    |      8 |  8.52e5 |
| sum    |      9 |  8.37e5 |

#+begin_src sh :results output
perf-explore -r 10 -l 100000 --space +RTS -T -RTS
#+end_src

| label1 | label2 | allocated | gcollects | maxLiveBytes | gcLiveBytes | MaxMem |
|--------+--------+-----------+-----------+--------------+-------------+--------|
| sum    |      0 |    7.25e6 |         7 |       3.95e6 |      3.95e6 | 1.05e7 |
| sum    |      1 |      0e-2 |         0 |         0e-2 |        0e-2 |   0e-2 |
| sum    |      2 |      0e-2 |         0 |         0e-2 |        0e-2 |   0e-2 |
| sum    |      3 |      0e-2 |         0 |         0e-2 |        0e-2 |   0e-2 |
| sum    |      4 |      0e-2 |         0 |         0e-2 |        0e-2 |   0e-2 |
| sum    |      5 |      0e-2 |         0 |         0e-2 |        0e-2 |   0e-2 |
| sum    |      6 |      0e-2 |         0 |         0e-2 |        0e-2 |   0e-2 |
| sum    |      7 |      0e-2 |         0 |         0e-2 |        0e-2 |   0e-2 |
| sum    |      8 |      0e-2 |         0 |         0e-2 |        0e-2 |   0e-2 |
| sum    |      9 |      0e-2 |         0 |         0e-2 |        0e-2 |   0e-2 |

** spacetime

#+begin_src sh :results output
perf-explore -r 10 -l 100000 --spacetime +RTS -T -RTS
#+end_src

| label1 | label2 |   time | allocated | gcollects | maxLiveBytes | gcLiveBytes | MaxMem |
|--------+--------+--------+-----------+-----------+--------------+-------------+--------|
| sum    |      0 | 1.90e7 |    7.25e6 |         7 |       3.95e6 |      3.95e6 | 1.05e7 |
| sum    |      1 | 9.25e5 |      0e-2 |         0 |         0e-2 |        0e-2 |   0e-2 |
| sum    |      2 | 9.29e5 |      0e-2 |         0 |         0e-2 |        0e-2 |   0e-2 |
| sum    |      3 | 9.09e5 |      0e-2 |         0 |         0e-2 |        0e-2 |   0e-2 |
| sum    |      4 | 8.71e5 |      0e-2 |         0 |         0e-2 |        0e-2 |   0e-2 |
| sum    |      5 | 8.26e5 |      0e-2 |         0 |         0e-2 |        0e-2 |   0e-2 |
| sum    |      6 | 8.18e5 |      0e-2 |         0 |         0e-2 |        0e-2 |   0e-2 |
| sum    |      7 | 8.26e5 |      0e-2 |         0 |         0e-2 |        0e-2 |   0e-2 |
| sum    |      8 | 8.03e5 |      0e-2 |         0 |         0e-2 |        0e-2 |   0e-2 |
| sum    |      9 | 8.50e5 |      0e-2 |         0 |         0e-2 |        0e-2 |   0e-2 |


** slop

#+begin_src haskell
import qualified Data.Map.Strict as Map
(\m -> (Map.!) m "slop") . fst . snd <$> slops 10 time (sum |$| [1..1000])
#+end_src

#+RESULTS:
: Cycles {word = 5487960}

* Resources

[[https://en.wikipedia.org/wiki/Time_Stamp_Counter][rdtsc]]

