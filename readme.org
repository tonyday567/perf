#+TITLE: perf

~perf~ provides some ideas, code and a library for low-level performance measurement for Haskell hacking. The library focuses on using the rdtsc instruction set that comes with the x86 chip to measure performance as number of cycles.

* Usage


#+begin_src haskell
import Perf
#+end_src

* setup

Running this readme.org is very slow compared with an external process which accesses the compiled version of the library.

#+begin_src haskell :results output
:set prompt " > "
:set -Wno-type-defaults
:set -Wno-name-shadowing
:set -XOverloadedStrings
#+end_src

#+RESULTS:

#+begin_src haskell :results output
import Perf
import Perf.Stats
import NumHask.Space (quantile)
import Data.FormatN
import Perf.Cycle
import Prelude as P
import Data.Foldable
import qualified Data.Text as Text
import qualified Data.Text.IO as Text
#+end_src

#+RESULTS:

* tick

The fundamental operation of Perf.Cycle is tick, which sandwiches a (strict) function application between two readings of the rdstc chip.

#+begin_src haskell
:t tick
#+end_src

#+RESULTS:
: tick :: (a -> b) -> a -> IO (Cycle, b)

tick returns in the IO monad, because reading a cycle counter is an IO effect. The trivial but fundamental point is that performance measurement effects the computation being measured.

Unlike benchmarking-style libraries, such as criterion, the result of the computation is passed through along with the cycle count. In this way, the `Perf` monad can be inserted into the midst of a computation in an attempt to measure performance in-situ as opposed to sitting off in a separate and perhaps unrepresentative process.

* tick_

tick_ measures the number of cycles between two clock reads.

#+begin_src haskell
:t tick_
#+end_src

#+RESULTS:
: tick_ :: IO Cycle

#+begin_src haskell
replicateM 10 tick_
#+end_src

#+RESULTS:
| 8530 | 910 | 730 | 668 | 642 | 648 | 644 | 642 | 646 | 640 |

* function application

#+begin_src haskell
fmap (fmap fst) . replicateM 10 $ tick (const ()) ()
#+end_src

#+RESULTS:
| 8610 | 3654 | 2900 | 2932 | 2672 | 2708 | 2684 | 2664 | 2582 | 2652 |

Here, ~const () ()~ was evaluated and took 6.7k cycles for the first effect, reducing down to 2.2k after 10 effects. What it did in that time we will never know, really, at least from usage of ~perf~. 2.2k cycles is, on my 2.5GHz machine equal to 2200 / 2.5e9 = 8.8e-7 of a second or 880 nanoseconds.

Alternatively, ~tickIO~ measures the evaluation of an IO value.

#+begin_src haskell
:t tickIO
#+end_src

#+RESULTS:
: tickIO :: IO a -> IO (Cycle, a)

#+begin_src haskell
fmap (fmap fst) . replicateM 10 $ tickIO (pure ())
#+end_src

#+RESULTS:
| 5840 | 2602 | 1910 | 1698 | 1668 | 1660 | 1672 | 1676 | 1680 | 1662 |

#+begin_src haskell
ticks 100 (const ()) ()
#+end_src

#+RESULTS:
| 8226 | 3298 | 3254 | 2686 | 2694 | 2724 | 2868 | 2732 | 2644 | 2678 | 2680 | 2896 | 2734 | 2606 | 2608 | 2598 | 2606 | 2738 | 2742 | 2610 | 2554 | 2532 | 2576 | 2592 | 2600 | 2562 | 2786 | 2592 | 2646 | 2624 | 2666 | 2640 | 2640 | 2602 | 2672 | 2560 | 3478 | 2556 | 2552 | 2572 | 2622 | 2492 | 2572 | 2706 | 2544 | 2604 | 2748 | 2570 | 2596 | 3078 | 2666 | 2592 | 2612 | 2648 | 2594 | 2564 | 2716 | 2564 | 2594 | 2596 | 2554 | 2766 | 2552 | 3026 | 2602 | 2860 | 2632 | 2614 | 2620 | 2586 | 3014 | 2626 | 2626 | 2614 | 2830 | 2624 | 2616 | 2648 | 2610 | 2626 | 2610 | 2590 | 2930 | 2622 | 2732 | 2698 | 3004 | 2664 | 2948 | 2630 | 2588 | 2766 | 2726 | 2600 | 2634 | 2792 | 2704 | 2774 | 2638 | 2634 |

* sum example

#+begin_src haskell
fmap (comma (Just 3) . fromIntegral) . fst <$> ticks 10 sum ([1..10000] :: [Double])
#+end_src

#+RESULTS:
| 3,680,000 | 5,020,000 | 726,000 | 693,000 | 2,880,000 | 746,000 | 671,000 | 1,730,000 | 626,000 | 618,000 |


#+begin_src haskell
ts <- ticks 10000 sum ([1..1000] :: [Double])
putStrLn $ Text.unpack $ average (fst ts)
#+end_src

#+RESULTS:
: 58,800

#+begin_src haskell
:set -XAllowAmbiguousTypes

fMono :: Int -> Int
fMono x = foldl' (+) 0 [1 .. x]

fPoly :: (Enum b, Num b, Additive b) => b -> b
fPoly x = foldl' (+) 0 [1 .. x]

fLambda :: Int -> Int
fLambda = \x -> foldl' (+) 0 [1 .. x]
#+end_src

#+begin_src haskell
fmap (median . fst) (ticks 1000 fMono 1000)
#+end_src

#+RESULTS:
: 63,400

#+begin_src haskell
fmap (median . fst) $ ticks 1000 fPoly 1000
#+end_src

#+RESULTS:
: 63,000

#+begin_src haskell
fmap (median . fst) $ ticks 1000 fLambda 1000
#+end_src

#+RESULTS:
: 63,400

* apps

** example1

- [ ] laziness kicks in on second run of ~fap "" f a~
- [ ] cycles' best multi run

#+begin_src sh :results output
perf-example1 -r 10000 --average -l 1000
#+end_src

#+RESULTS:
: example1
: sum of one to 7132 is: 25436278
: (25436278,fromList [("",Sum {getSum = 273196}),("file read",Sum {getSum = 375068}),("length",Sum {getSum = 18702}),("print result",Sum {getSum = 27104})])
: raw results
: fromList [("PerfT cycle'",18.0),("PerfT cycles'",5925.9436),("PerfT mtick",27764.0),("PerfT mtick 0",16.0),("PerfT mtick 1",14.0),("PerfT mtick 2",16.0),("PerfT mtick 3",16.0),("PerfT mtick 4",18.0),("PerfT mticks",7282.1758),("raw multi tick",8568.6478),("raw ticks",8803.8314)]
: regressions:
: ["PerfT mtick","PerfT mticks","raw multi tick","raw ticks"]


** baseline callibration

#+begin_src sh :results output
perf-basic --help
#+end_src

#+RESULTS:
#+begin_example
basic perf callibration

Usage: perf-basic (-r|--runs ARG) (-l|--length ARG)
                  [--best | --median | --average | --averagesecs]

  perf benchmarking

Available options:
  -r,--runs ARG            number of runs to perform
  -l,--length ARG          length of list
  --best                   report upper decile
  --median                 report median
  --average                report average
  --averagesecs            report average in seconds
  -h,--help                Show this help text
#+end_example

perf-basic issues:

- [ ] ~ticks~ runs are sometimes double ~multi tick~.
- [ ] ~tickLazy~ computation escapes
- [ ] ~tick~, ~tickWHNF~, ~tickForce~, ~tickForceArgs~ same for sums
- [ ] ~tickForce~ blows out for mapInc:

  multi tickForce mapInc | 202,000, multi tickForceArgs mapInc | 57.8
- [ ] fuseSum 2000 | recSum, polySum, lambdaSum: 5750



#+begin_src sh :results output
perf-basic -r 10000 --average -l 1000
#+end_src

#+RESULTS:
#+begin_example
tick_: [14,16,16,16,16,16,14,14,16,16]
tick_: 16.0
const (): [16,16,16,16,18,18,18,18,16,16]
const ()|19.4
tickIO (pure ()): 16.2
ticks fuseSum | 2,060
multi tick fuseSum | 1,990
multi tickWHNF fuseSum | 2,030
multi tickLazy fuseSum | 18.3
multi tickForce fuseSum | 2,000
multi tickForceArgs fuseSum | 1,980
ticks fuseConst | 1,380
multi tick fuseConst | 1,310
multi tickWHNF fuseConst | 1,420
multi tickLazy fuseConst | 18.7
multi tickForce fuseConst | 1,340
multi tickForceArgs fuseConst | 1,320
ticks recSum | 10,700
multi tick recSum | 5,750
multi tickWHNF recSum | 5,780
multi tickLazy recSum | 18.7
multi tickForce recSum | 5,840
multi tickForceArgs recSum | 5,940
ticks monoSum | 11,100
multi tick monoSum | 5,720
multi tickWHNF monoSum | 5,770
multi tickLazy monoSum | 18.5
multi tickForce monoSum | 5,690
multi tickForceArgs monoSum | 5,780
ticks polySum | 11,200
multi tick polySum | 5,680
multi tickWHNF polySum | 5,800
multi tickLazy polySum | 18.7
multi tickForce polySum | 5,820
multi tickForceArgs polySum | 5,850
ticks lambdaSum | 11,200
multi tick lambdaSum | 5,640
multi tickWHNF lambdaSum | 5,750
multi tickLazy lambdaSum | 18.1
multi tickForce lambdaSum | 5,700
multi tickForceArgs lambdaSum | 5,810
ticks mapInc | 126
multi tick mapInc | 107
multi tickWHNF mapInc | 169
multi tickLazy mapInc | 18.2
multi tickForce mapInc | 202,000
multi tickForceArgs mapInc | 57.8
#+end_example

#+begin_src sh :results output
ghc app/basic.hs -O2
./app/basic -r 10000 --average -l 1000
#+end_src


* Resources

[[https://en.wikipedia.org/wiki/Time_Stamp_Counter][rdtsc]]


* ToDo zipping

#+begin_src haskell
-- * zipping
-- from https://doisinkidney.com/posts/2019-05-08-list-manipulation-tricks.html

-- what is the name of this type of recursion?
zipRec :: [a] -> [b] -> [(a,b)]
zipRec [] _ = []
zipRec _ [] = []
zipRec (x:xs) (y:ys) = (x,y) : zipRec xs ys

-- step 1: write as a case statement on the first argument

zipCase :: [a] -> [b] -> [(a,b)]
zipCase xs = case xs of
  [] -> const []
  (x:xs') -> \case
    [] -> []
    (y:ys) -> (x,y):zipCase xs' ys

-- step 2: rewrite the case statements as auxillary functions
zipAux :: [a] -> [b] -> [(a,b)]
zipAux xs = case xs of
  [] -> b
  (x:xs') -> f x xs'
  where
    b _ = []
    f x xs' = \case
      [] -> []
      (y:ys) -> (x,y):zipAux xs' ys

-- step 3: refactor the recursive call to the first case expression
zipRef :: [a] -> [b] -> [(a,b)]
zipRef xs = case xs of
  [] -> b
  (x:xs') -> f x (zipRef xs')
  where
    b _ = []
    f x xs' = \case
      [] -> []
      (y:ys) -> (x,y): xs' ys

-- step 4 pass the auxillary functions to foldr
-- zipR :: [a] -> [b] -> [(a,b)]
zipR :: [a] -> [b] -> [(a, b)]
zipR = foldr f b
  where
    b _ = []
    f x xs = \case
      [] -> []
      (y:ys) -> (x,y): xs ys

zipR' :: [a] -> [b] -> [(a, b)]
zipR' = foldr f (const [])
  where
    f x xs ys = case ys of
      [] -> []
      (y:ys') -> (x,y): xs ys'

-- from https://doisinkidney.com/posts/2020-08-22-some-more-list-algorithms.html
newtype Zip a b =
  Zip { runZip :: a -> (Zip a b -> b) -> b }

zipZ :: [a] -> [b] -> [(a,b)]
zipZ xs ys = foldr xf (const []) xs (Zip (foldr yf yb ys))
  where
    xf x xk yk = runZip yk x xk

    yf y yk x xk = (x,y) : xk (Zip yk)
    yb _ _ = []

newtype a -&> b = Hyp { invoke :: (b -&> a) -> b }

{-
FIXME:

zipHyp :: forall a b. [a] -> [b] -> [(a,b)]
zipHyp xs ys = invoke xz yz
  where
    xz :: (a -> [(a,b)]) -&> [(a,b)]
    xz = foldr f b xs
      where
        f x xk = Hyp (\yk -> invoke yk xk x)
        b = Hyp (\_ -> [])

    yz :: [(a,b)] -&> (a -> [(a,b)])
    yz = foldr f b ys
      where
        f y yk = Hyp (\xk x -> (x,y) : invoke xk yk)
        b = Hyp (\_ _ -> [])

-}

-- a -&> a ~ Fix (Cont a)
newtype HypP p a b = HypP { invokeP :: p (HypP p b a) b }
newtype HypM m a b = HypM { invokeM :: m ((HypM m a b -> a) -> b) }
#+end_src
